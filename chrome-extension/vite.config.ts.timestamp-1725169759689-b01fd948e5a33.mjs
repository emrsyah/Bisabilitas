// vite.config.ts
import { defineConfig } from "file:///D:/Users/muham/OneDrive/Dokumen/Coding/Side%20Project/bisabilitas/node_modules/.pnpm/vite@5.3.1_@types+node@20.14.2_sass@1.77.5_terser@5.28.1/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "path";
import libAssetsPlugin from "file:///D:/Users/muham/OneDrive/Dokumen/Coding/Side%20Project/bisabilitas/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@0.5.21/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import * as fs from "fs";
import * as path from "path";
import { ManifestParser, colorLog } from "file:///D:/Users/muham/OneDrive/Dokumen/Coding/Side%20Project/bisabilitas/packages/dev-utils/dist/index.js";
import { pathToFileURL } from "url";
import * as process2 from "process";
var __vite_injected_original_dirname = "D:\\Users\\muham\\OneDrive\\Dokumen\\Coding\\Side Project\\bisabilitas\\chrome-extension\\utils\\plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path2) => `${path2}?${Date.now().toString()}`;
  if (process2.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process2.env.__FIREFOX__;
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.ts
import { watchRebuildPlugin } from "file:///D:/Users/muham/OneDrive/Dokumen/Coding/Side%20Project/bisabilitas/packages/hmr/dist/index.js";
var __vite_injected_original_dirname2 = "D:\\Users\\muham\\OneDrive\\Dokumen\\Coding\\Side Project\\bisabilitas\\chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var libDir = resolve2(rootDir2, "lib");
var isDev = process.env.__DEV__ === "true";
var isProduction = !isDev;
var outDir = resolve2(rootDir2, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@lib": libDir,
      "@assets": resolve2(libDir, "assets")
    }
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve2(__vite_injected_original_dirname2, "lib/background/index.ts"),
      name: "BackgroundScript",
      fileName: "background"
    },
    outDir,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    modulePreload: true,
    rollupOptions: {
      external: ["chrome"]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
